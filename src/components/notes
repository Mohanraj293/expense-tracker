    <div>
      <div className="container-fluid">
        <br></br>
        <h2 className="centered">Analytics of your Expenses</h2>
        <div className="row">
          <div className="col-md-6">
            <Chart type="pie" width={500} height={300} {...pieData} />
          </div>
          <div className="col-md-6">
            <Chart type="bar" width={500} height={300} {...barData} />
          </div>
        </div>
      </div>
    </div>


    import React, { useState, useEffect } from "react";
import axios from "axios";
import { Modal, Button, Form } from "react-bootstrap";
import CreatableSelect from "react-select/creatable";

const TransactionForm = () => {
  const [account, setAccount] = useState("");
  const [date, setDate] = useState("");
  const [currency, setCurrency] = useState("");
  const [show, setShow] = useState(false);
  const [transactionType, setTransactionType] = useState("income");
  const [amount, setAmount] = useState("");
  const [note, setNote] = useState("");
  const [tags, setTags] = useState([]);
  const [tagOptions, setTagOptions] = useState([]);

  const handleShow = () => setShow(true);
  const handleClose = () => setShow(false);
  const [currencies, setCurrencies] = useState([]);

  useEffect(() => {
    axios
      .get("http://127.0.0.1:8002/api/currencies/")
      .then((response) => {
        setCurrencies(response.data);
      })
      .catch((error) => {
        console.log(error);
      });
  }, []);

  useEffect(() => {
    axios
      .get("http://127.0.0.1:8002/api/tags/")
      .then((response) => {
        const tags = response.data.map((tag) => tag.name);
        const uniqueTags = [...new Set(tags)];
        const options = uniqueTags.map((tag) => ({
          value: tag,
          label: tag,
        }));
        setTagOptions(options);
      })
      .catch((error) => {
        console.log(error);
      });
  }, []);
  const handleTransactionTypeClick = (type) => {
    setTransactionType(type);
  };

  const handleAmountChange = (e) => {
    setAmount(e.target.value);
  };

  const handleNoteChange = (e) => {
    setNote(e.target.value);
  };

  const handleTagsChange = (selectedOptions) => {
    const values = selectedOptions
      ? selectedOptions.map((option) => option.value)
      : [];
    setTags(values);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    axios
      .post("http://127.0.0.1:8002/api/transactions/", {
        transaction_type: transactionType,
        amount: amount,
        note: note, // change 'description' to 'note'
        tags: tags,
        account: account, // add 'account' field
        date: date, // add 'date' field
        amount_currency: currency, // add 'amount_currency' field
      })
      .then((response) => {
        console.log(response.data);
        handleClose();
      })
      .catch((error) => {
        console.log(error);
      });
  };

  return (
    <>
      <Button variant="primary" onClick={handleShow}>
        New Transaction
      </Button>

      <Modal show={show} onHide={handleClose}>
        <Modal.Header closeButton>
          <Modal.Title>New Transaction</Modal.Title>
        </Modal.Header>

        <Modal.Body>
          <div className="ui top attached three item menu">
            <button
              className={`ui item ${
                transactionType === "expense" ? "active red" : "red"
              }`}
              onClick={() => handleTransactionTypeClick("EXPENSE")}
            >
              Expense
            </button>
            <button
              className={`ui item ${
                transactionType === "transfer" ? "active black" : "black"
              }`}
              onClick={() => handleTransactionTypeClick("TRANSFER")}
            >
              Transfer
            </button>
            <button
              className={`ui item ${
                transactionType === "income" ? "active green" : "green"
              }`}
              onClick={() => handleTransactionTypeClick("INCOME")}
            >
              Income
            </button>
          </div>

          <div className="ui bottom attached segment">
            <Form onSubmit={handleSubmit}>
              <Form.Group controlId="amount">
                <Form.Label>Amount</Form.Label>
                <Form.Control
                  type="number"
                  value={amount}
                  onChange={handleAmountChange}
                />
              </Form.Group>
              <Form.Group controlId="account">
                <Form.Label>Account</Form.Label>
                <Form.Control
                  type="text"
                  value={account}
                  onChange={(e) => setAccount(e.target.value)}
                />
              </Form.Group>

              <Form.Group controlId="date">
                <Form.Label>Date</Form.Label>
                <Form.Control
                  type="date"
                  value={date}
                  onChange={(e) => setDate(e.target.value)}
                />
              </Form.Group>

              <Form.Group controlId="currency">
                <Form.Label>Currency</Form.Label>
                <Form.Control as="select">
                  {currencies.map((currency) => (
                    <option key={currency[0]} value={currency[0]}>
                      {currency[1]}
                    </option>
                  ))}
                </Form.Control>
              </Form.Group>

              <Form.Group controlId="description">
                <Form.Label>Note</Form.Label>
                <Form.Control
                  type="text"
                  value={note}
                  onChange={handleNoteChange}
                />
              </Form.Group>

              <Form.Group controlId="tags">
                <Form.Label>Tags</Form.Label>
                <CreatableSelect
                  isMulti={true}
                  options={tagOptions}
                  onChange={handleTagsChange}
                  value={tags.map((t) => ({ value: t, label: t }))}
                />
              </Form.Group>

              <Button variant="primary" type="submit">
                Save
              </Button>
            </Form>
          </div>
        </Modal.Body>
      </Modal>
    </>
  );
};

export default TransactionForm;




import React, { useEffect, useState } from "react";
import axios from "axios";
import { Container, Row, Col, Spinner, Button, Badge } from "react-bootstrap";
import { FaArrowLeft, FaArrowRight, FaPen } from "react-icons/fa";
import "bootstrap/dist/css/bootstrap.min.css";
import "./RecentTrans.css";
import TransactionFilterForm from "./TransactionFilterForm";
import EditTransactionModal from "./EditTransactions";


export default function RecentTrans() {
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [accounts, setAccounts] = useState({});
  const [editTransaction, setEditTransaction] = useState(null);
  const handleEditClick = (transaction) => {
    setEditTransaction(transaction);
  };


  useEffect(() => {
    axios
      .get("http://127.0.0.1:8002/api/accounts/")
      .then((response) => {
        const accountsData = response.data.reduce((acc, account) => {
          acc[account.id] = account;
          return acc;
        }, {});
        setAccounts(accountsData);
      })
      .catch((error) => {
        console.log(error);
      });
  }, []);

  useEffect(() => {
    axios
      .get("http://127.0.0.1:8002/api/transactions/")
      .then((response) => {
        const transactionsData = response.data.map((transaction) => ({
          ...transaction,
          accountName: accounts[transaction.account]?.name || "Unknown",
          type: transaction.transaction_type,
        }));

        const sortedTransactions = transactionsData.sort(
          (a, b) => new Date(b.date) - new Date(a.date)
        );
        const recentTransactions = sortedTransactions.slice(0, 30);
        setTransactions(recentTransactions);
        console.log(recentTransactions);
        setLoading(false);
      })
      .catch((error) => {
        console.log(error);
      });
  }, [accounts]);

  const formatDate = (date) => {
    const options = { day: "numeric", month: "short" };
    return new Date(date).toLocaleDateString("en-US", options);
  };
  const handleFilterSubmit = (filters) => {
    const url = "http://127.0.0.1:8002/api/transactions/";
    const params = new URLSearchParams(filters).toString();
    setLoading(true);
    axios
      .get(`${url}?${params}`)
      .then((response) => {
        const transactionsData = response.data.map((transaction) => ({
          ...transaction,
          accountName: accounts[transaction.account]?.name || "Unknown",
          type: transaction.transaction_type,
        }));

        const sortedTransactions = transactionsData.sort(
          (a, b) => new Date(b.date) - new Date(a.date)
        );
        const recentTransactions = sortedTransactions.slice(0, 30);
        setTransactions(recentTransactions);
        setLoading(false);
      })
      .catch((error) => {
        console.log(error);
      });
  };

  return (
    <Container fluid className="recent-trans-container">
      <TransactionFilterForm onSubmit={handleFilterSubmit} />
      <div className="transactions-list__wrapper">
        {loading ? (
          <div className="dimmer">
            <Spinner animation="border" />
          </div>
        ) : (
          transactions.map((transaction, index) => (
            <div className="transaction-item" key={index}>
              <div className="transaction-item__date">
                {formatDate(transaction.date)}
              </div>
              <div className="transaction-item__info-wrapper">
                <div className="transaction-item__info">
                  <div className="transaction-item__account">
                    {accounts[transaction.account].name}
                  </div>
                  {transaction.type === "INCOME" ? (
                    <FaArrowLeft color="grey" />
                  ) : (
                    <FaArrowRight color="grey" />
                  )}

                  <div className="transaction-item__tag-or-destination">
                    {transaction.type === "TRANSFER"
                      ? accounts[transaction.destination_account].name
                      : transaction.tags && transaction.tags.length > 0
                      ? transaction.tags.map((tag, index) => (
                          <Badge className="custom-badge" key={index}>
                            {tag.name}
                          </Badge>
                        ))
                      : ""}
                  </div>

                  {transaction.note && (
                    <div
                      style={{
                        fontSize: "1rem",
                        color: "#929293",
                        paddingLeft: "0.5em",
                      }}
                    >
                      {transaction.note}
                    </div>
                  )}
                </div>
              </div>
              <div className="transaction-item__amount">
                <span
                  className={
                    transaction.type === "INCOME"
                      ? "mono positive"
                      : "mono negative"
                  }
                >
                  {transaction.amount} {transaction.currency}
                </span>
              </div>
              <div className="transaction-item__edit">
                <Button
                  variant="link"
                  onClick={() => handleEditClick(transaction)}
                >
                  <FaPen color="grey" />
                </Button>
              </div>
            </div>
          ))
        )}
      </div>
      <EditTransactionModal
        transaction={editTransaction}
        onHide={() => setEditTransaction(null)}
      />
    </Container>
  );
}
